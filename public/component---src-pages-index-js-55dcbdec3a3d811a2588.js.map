{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./src/components/Adsense/index.js","webpack:///./src/templates/Post/index.js"],"names":["__webpack_require__","r","__webpack_exports__","d","pageQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","lodash_get__WEBPACK_IMPORTED_MODULE_1__","lodash_get__WEBPACK_IMPORTED_MODULE_1___default","templates_Post__WEBPACK_IMPORTED_MODULE_2__","components_Meta__WEBPACK_IMPORTED_MODULE_3__","components_Layout__WEBPACK_IMPORTED_MODULE_4__","BlogIndex","_ref","data","location","posts","get","a","createElement","className","site","map","_ref2","i","post","options","isIndex","key","Adsense","componentDidMount","this","props","clientId","window","adsbygoogle","push","render","_this$props","slotId","format","react_default","style","display","data-ad-client","data-ad-slot","data-ad-format","React","Component","getAd","Post","_data$frontmatter","frontmatter","category","tags","description","title","path","date","image","adsense","html","isMore","match","fixed","gatsby_browser_entry","boxShadow","to","dateTime","Badges","items","primary","gatsby_image_default","margin","dangerouslySetInnerHTML","__html","getDescription","Button","label","components_Adsense","body","replace","split","_ref3","item"],"mappings":"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","file":"component---src-pages-index-js-55dcbdec3a3d811a2588.js","sourcesContent":["import { graphql } from 'gatsby'\nimport React from 'react'\nimport get from 'lodash/get'\n\nimport Post from 'templates/Post'\nimport Meta from 'components/Meta'\nimport Layout from 'components/Layout'\n\nconst BlogIndex = ({ data, location }) => {\n  const posts = get(data, 'remark.posts')\n  return (\n    <Layout location={location}>\n    <div className=\"row justify-content-center full-width descriptions-skills\">\n      <div className=\"col-4\">\n        <p>Hola!</p>\n      </div>\n    </div>\n      <Meta site={get(data, 'site.meta')} />\n      {posts.map(({ post }, i) => (\n        <Post\n          data={post}\n          options={{\n            isIndex: true,\n          }}\n          key={i}\n        />\n      ))}\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query IndexQuery {\n    site {\n      meta: siteMetadata {\n        title\n        description\n        url: siteUrl\n        author\n        twitter\n        adsense\n      }\n    }\n    remark: allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      posts: edges {\n        post: node {\n          html\n          frontmatter {\n            layout\n            title\n            path\n            category\n            tags\n            description\n            date(formatString: \"YYYY/MM/DD\")\n            image {\n              childImageSharp {\n                fixed(width: 500) {\n                  ...GatsbyImageSharpFixed_withWebp\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\n\nclass Adsense extends React.Component {\n  componentDidMount() {\n    const { clientId } = this.props\n    if (clientId) {\n      ;(window.adsbygoogle = window.adsbygoogle || []).push({})\n    }\n  }\n\n  render() {\n    const { clientId, slotId, format } = this.props\n\n    return clientId ? (\n      <div className=\"ad\">\n        <ins\n          className=\"adsbygoogle\"\n          style={{ display: 'block' }}\n          data-ad-client={clientId}\n          data-ad-slot={slotId}\n          data-ad-format={format}\n        />\n      </div>\n    ) : (\n      ''\n    )\n  }\n}\nexport default Adsense\n","import { Link } from 'gatsby'\nimport get from 'lodash/get'\nimport React from 'react'\nimport map from 'lodash/map'\nimport Img from 'gatsby-image'\n\nimport Adsense from 'components/Adsense'\nimport Footer from 'components/Footer'\nimport './style.scss'\n\nconst Post = ({ data, options }) => {\n  const {\n    category,\n    tags,\n    description,\n    title,\n    path,\n    date,\n    image,\n  } = data.frontmatter\n  const { isIndex, adsense } = options\n  const html = get(data, 'html')\n  const isMore = isIndex && !!html.match('<!--more-->')\n  const fixed = get(image, 'childImageSharp.fixed')\n\n  return (\n    <div className=\"article\" key={path}>\n      <div className=\"container\">\n        <div className=\"info\">\n          <Link style={{ boxShadow: 'none' }} to={path}>\n            <h1>{title}</h1>\n            <time dateTime={date}>{date}</time>\n          </Link>\n          {Badges({ items: [category], primary: true })}\n          {Badges({ items: tags })}\n        </div>\n        <div className=\"content\">\n          <p>{description}</p>\n          {fixed ? (\n            <Img fixed={fixed} style={{ display: 'block', margin: '0 auto' }} />\n          ) : (\n            ''\n          )}\n        </div>\n        <div\n          className=\"content\"\n          dangerouslySetInnerHTML={{\n            __html: isMore ? getDescription(html) : html,\n          }}\n        />\n        {isMore ? Button({ path, label: 'MORE', primary: true }) : ''}\n        {getAd(isIndex, adsense)}\n      </div>\n    </div>\n  )\n}\n\nexport default Post\n\nconst getAd = (isIndex, adsense) => {\n  return !isIndex ? <Adsense clientId={adsense} slotId=\"\" format=\"auto\" /> : ''\n}\n\nconst getDescription = body => {\n  body = body.replace(/<blockquote>/g, '<blockquote class=\"blockquote\">')\n  if (body.match('<!--more-->')) {\n    body = body.split('<!--more-->')\n    if (typeof body[0] !== 'undefined') {\n      return body[0]\n    }\n  }\n  return body\n}\n\nconst Button = ({ path, label, primary }) => (\n  <Link className=\"readmore\" to={path}>\n    <span\n      className={`btn btn-outline-primary btn-block ${\n        primary ? 'btn-outline-primary' : 'btn-outline-secondary'\n      }`}\n    >\n      {label}\n    </span>\n  </Link>\n)\n\nconst Badges = ({ items, primary }) =>\n  map(items, (item, i) => {\n    return (\n      <span\n        className={`badge ${primary ? 'badge-primary' : 'badge-secondary'}`}\n        key={i}\n      >\n        {item}\n      </span>\n    )\n  })\n"],"sourceRoot":""}